GLOBAL { 
  INPUTNAME "clean.nes"; 
  OUTPUTNAME "main.asm"; 
  INPUTOFFS $0010; 
  INPUTSIZE $8000; 
  COMMENTS $3; 
  MNEMONICCOLUMN $9;  # default
  ARGUMENTCOLUMN $11; # default
  COMMENTCOLUMN $40;  # adjusted + 15
  STARTADDR $8000; 
  LABELBREAK $1; 
};

SEGMENT { NAME "VECTORS"; START $FFFA; END $FFFF; };

LABEL { ADDR $0012; NAME "tmp12"; COMMENT "Appears to have multiple uses. One is for ram init along with $13"; };
LABEL { ADDR $0013; NAME "tmp13"; };
LABEL { ADDR $0014; NAME "tmp14"; COMMENT "at least one use is to send nametable to ppu (with $15)"; };
LABEL { ADDR $0015; NAME "tmp15"; };
LABEL { ADDR $001E; NAME "jmp1E"; SIZE $2; COMMENT "used for indirect jumping at 8029.  related to rendering"; };
LABEL { ADDR $0029; NAME "ppuNametableSelect"; COMMENT "need confirmation.  0,1,2 or 3 for 2000, 2400, 2800 or 2C00"; };
LABEL { ADDR $002B; NAME "aBackup"; };
LABEL { ADDR $002C; NAME "xBackup"; };
LABEL { ADDR $002D; NAME "yBackup"; };
LABEL { ADDR $002E; NAME "currentPpuMask"; };
LABEL { ADDR $002F; NAME "controllerBeingRead"; COMMENT "set to 1 while controller is being read"; };
LABEL { ADDR $0030; NAME "controllerInput"; COMMENT "used only during reading.  buttons left in x register"; };
LABEL { ADDR $0035; NAME "ppuRenderDirection"; COMMENT "need confirmation.  0 for horiz, 1 for vert
; also used as nmi wait variable at 8D6F"; };
LABEL { ADDR $0036; NAME "currentScrollX"; COMMENT "appears to always be 0"; };
LABEL { ADDR $0037; NAME "currentScrollY"; COMMENT "appears to always be 0"; };
LABEL { ADDR $003C; NAME "nmiWaitVar"; };
LABEL { ADDR $003D; NAME "ppuPatternTables"; COMMENT "need confirmation.  Select background and sprite tables (00, 10, 08 or 18 for bg & sprite)"; };
LABEL { ADDR $0056; NAME "rngSeed"; SIZE $9; };
LABEL { ADDR $00FF; NAME "lastZPAddress"; COMMENT "This causes tetris-ram.awk to add '.bss' after zeropage"; };

LABEL { ADDR $0100; NAME "stack"; SIZE $100; };
LABEL { ADDR $0200; NAME "oamStaging"; SIZE $100; };

LABEL { ADDR $030A; NAME "playfield"; SIZE $C8; };
LABEL { ADDR $03D2; NAME "playfieldStash"; SIZE $C8; COMMENT "playfield copied here while paused"; };

LABEL { ADDR $2000; NAME "PPUCTRL"; };
LABEL { ADDR $2001; NAME "PPUMASK"; };
LABEL { ADDR $2002; NAME "PPUSTATUS"; };
LABEL { ADDR $2003; NAME "OAMADDR"; };
LABEL { ADDR $2004; NAME "OAMDATA"; };
LABEL { ADDR $2005; NAME "PPUSCROLL"; };
LABEL { ADDR $2006; NAME "PPUADDR"; };
LABEL { ADDR $2007; NAME "PPUDATA"; };

LABEL { ADDR $4000; NAME "SQ1_VOL"; };
LABEL { ADDR $4001; NAME "SQ1_SWEEP"; };
LABEL { ADDR $4002; NAME "SQ1_LO"; };
LABEL { ADDR $4003; NAME "SQ1_HI"; };
LABEL { ADDR $4004; NAME "SQ2_VOL"; };
LABEL { ADDR $4005; NAME "SQ2_SWEEP"; };
LABEL { ADDR $4006; NAME "SQ2_LO"; };
LABEL { ADDR $4007; NAME "SQ2_HI"; };
LABEL { ADDR $4008; NAME "TRI_LINEAR"; };
LABEL { ADDR $400A; NAME "TRI_LO"; };
LABEL { ADDR $400B; NAME "TRI_HI"; };
LABEL { ADDR $400C; NAME "NOISE_VOL"; };
LABEL { ADDR $400E; NAME "NOISE_LO"; };
LABEL { ADDR $400F; NAME "NOISE_HI"; };
LABEL { ADDR $4010; NAME "DMC_FREQ"; };
LABEL { ADDR $4011; NAME "DMC_RAW"; };
LABEL { ADDR $4012; NAME "DMC_START"; COMMENT "start << 6 + $C000"; };
LABEL { ADDR $4013; NAME "DMC_LEN"; COMMENT "len << 4 + 1"; };
LABEL { ADDR $4014; NAME "OAMDMA"; };
LABEL { ADDR $4015; NAME "SND_CHN"; };
LABEL { ADDR $4016; NAME "JOY1"; };
LABEL { ADDR $4017; NAME "JOY2"; };

LABEL { ADDR $8000; NAME "reset"; SIZE $3; COMMENT "$8002 is incremented during bootup.  mmc1 remnant?"; };
LABEL { ADDR $8003; NAME "irq"; };
LABEL { ADDR $8004; NAME "nmi"; };
LABEL { ADDR $802C; NAME "resetPpuRegistersAndCopyOamStaging"; };
LABEL { ADDR $804F; NAME "finishNmi"; };
LABEL { ADDR $8086; NAME "unknownRoutine02"; COMMENT "can be jumped to using 1E/1F"; };
LABEL { ADDR $80CD; NAME "unknownRoutine08"; COMMENT "can be jumped to using 1E/1F"; };
LABEL { ADDR $8105; NAME "resetContinued"; };
LABEL { ADDR $8117; NAME "@vblankWait1"; };
LABEL { ADDR $811C; NAME "@vblankWait2"; };
LABEL { ADDR $8150; NAME "initRoutine"; COMMENT "need a better name"; };
LABEL { ADDR $8154; NAME "@initZeroPage"; COMMENT "this doesn't touch the first 16 bytes of zp.  FDS remnant?"; };
LABEL { ADDR $815C; NAME "@initRngSeed"; };
LABEL { ADDR $819A; NAME "ntCreditScreenPatch"; COMMENT "address, length, data, null"; };
LABEL { ADDR $81AB; NAME "drawCreditScreenPatch"; COMMENT "this writes 'credit screen' to the nametable but is overwritten"; };
LABEL { ADDR $81AD; NAME "@checkForNextPatch"; COMMENT "this routine looks like it can write multiple patches, but is hardcoded to the above"; };
LABEL { ADDR $817F; NAME "@nextByte"; };
LABEL { ADDR $81C1; NAME "@nextByte"; };
LABEL { ADDR $81CF; NAME "@resetScroll"; };
LABEL { ADDR $8A25; NAME "@copyLoop"; COMMENT "would be easier to read as playfield-1 and playfieldStash-1"; };
LABEL { ADDR $8A8A; NAME "@waitForNmi"; };
LABEL { ADDR $8F68; NAME "unusedMMC1Registers"; };
LABEL { ADDR $8F70; NAME "setCNROMBank0"; };
LABEL { ADDR $8F7B; NAME "unusedBankSwitch"; COMMENT "see tcrf.net"; };
LABEL { ADDR $8F97; NAME "cnromOrMMC1BankSwitch"; };
LABEL { ADDR $8FA2; NAME "mmc1BankSwitch"; };
LABEL { ADDR $8FB4; NAME "@mmc1Loop"; };
LABEL { ADDR $8FCE; NAME "pollController"; COMMENT "leaves buttons in x register"; };
LABEL { ADDR $8FD6; NAME "@pollControllerActual"; };
LABEL { ADDR $8FE4; NAME "@nextButton"; };
LABEL { ADDR $8FF8; NAME "blankOutNametables"; };

LABEL { ADDR $9006; NAME "@blankLoop"; };
LABEL { ADDR $9016; NAME "initRam"; };
LABEL { ADDR $9018; NAME "@nextPage"; };
LABEL { ADDR $9021; NAME "@initPage"; };
LABEL { ADDR $9028; NAME "@nextByte"; };
LABEL { ADDR $9092; NAME "generateNextPseudoRandomNumber"; };
LABEL { ADDR $90A2; NAME "@shiftRightLoop"; };
LABEL { ADDR $92A7; NAME "unknownTable08"; SIZE $36; };
LABEL { ADDR $977B; NAME "unknownTable03"; COMMENT "possible nametable"; };
LABEL { ADDR $9A60; NAME "unknownTable09"; SIZE $4; };
LABEL { ADDR $9B31; NAME "sleepRoutine"; COMMENT "y controls number of cycles"; };
LABEL { ADDR $9B33; NAME "@sleepLoop"; };
LABEL { ADDR $9B3D; NAME "introScreenSprites"; SIZE $50; };
LABEL { ADDR $9B8D; NAME "unknownTable04"; COMMENT "above sprite table stops here"; };
LABEL { ADDR $9C22; NAME "drawBPSLogo"; };
LABEL { ADDR $9C2E; NAME "@blankLoop"; };
LABEL { ADDR $9C4C; NAME "@sendByte"; };
LABEL { ADDR $9C5B; NAME "@spriteLoop"; };
LABEL { ADDR $9C64; NAME "@vblankWait"; };
LABEL { ADDR $9C72; NAME "@paletteLoop"; };
LABEL { ADDR $9C86; NAME "introScreenPalette"; SIZE $20; };
LABEL { ADDR $9CA6; NAME "unknownTable05"; COMMENT "above palette table ends here"; };
LABEL { ADDR $9CD5; NAME "addressTable01"; SIZE $8; COMMENT "has at least one palette table"; };
LABEL { ADDR $9D50; NAME "unknownTable02"; SIZE $4; };

LABEL { ADDR $AF88; NAME "unknownTable01"; SIZE $96; COMMENT "copied to $04D9 during init at $817D"; };
LABEL { ADDR $AEC0; NAME "playfieldPausedTiles"; SIZE $C8; COMMENT "copied to playfield when paused"; };

LABEL { ADDR $C001; NAME "cnromBank"; SIZE $2; COMMENT "need to confirm.  Most likely for bus conflict avoidance"; };
LABEL { ADDR $C003; NAME "debugMMC1Support"; COMMENT "https://tcrf.net/Tetris_(NES,_Bullet-Proof_Software)"; };
LABEL { ADDR $C004; NAME "debugHiddenMusic"; COMMENT "see link above"; };
LABEL { ADDR $C005; NAME "debugEndingScreen"; COMMENT "B+Select to see ending screen"; };
LABEL { ADDR $C1A7; NAME "unknownTable07"; SIZE $20; };
LABEL { ADDR $C2D5; NAME "unknownTable06"; SIZE $18; };

LABEL { ADDR $F800; NAME "renderPlayfieldColumns01"; COMMENT "can be jumped to using 1E/1F"; };
LABEL { ADDR $F91A; NAME "renderPlayfieldColumns23"; COMMENT "can be jumped to using 1E/1F"; };
LABEL { ADDR $FA34; NAME "renderPlayfieldColumns45"; COMMENT "can be jumped to using 1E/1F"; };
LABEL { ADDR $FB4E; NAME "renderPlayfieldColumns67"; COMMENT "can be jumped to using 1E/1F"; };
LABEL { ADDR $FC68; NAME "renderPlayfieldColumns89"; COMMENT "can be jumped to using 1E/1F"; };
LABEL { ADDR $FF2D; NAME "jumpToFinishNmi"; };
LABEL { ADDR $FF30; NAME "unknownRoutine07"; COMMENT "can be jumped to using 1E/1F"; };

RANGE { START $8000; END $800B; TYPE CODE; };
RANGE { START $800C; END $800C; TYPE BYTETABLE; };
RANGE { START $800D; END $8199; TYPE CODE; };
RANGE { START $819A; END $81AA; TYPE BYTETABLE; };
RANGE { START $81AB; END $81D5; TYPE CODE; };
RANGE { START $81D6; END $81E4; TYPE BYTETABLE; };
RANGE { START $81E5; END $834F; TYPE CODE; };
RANGE { START $8350; END $8352; TYPE BYTETABLE; };
RANGE { START $8353; END $87A8; TYPE CODE; };
RANGE { START $87A9; END $87CE; TYPE BYTETABLE; };
RANGE { START $87CF; END $8906; TYPE CODE; };
RANGE { START $8907; END $8919; TYPE BYTETABLE; };
RANGE { START $891A; END $8961; TYPE CODE; };
RANGE { START $8962; END $8976; TYPE BYTETABLE; };
RANGE { START $8977; END $89AC; TYPE CODE; };
RANGE { START $89AD; END $89DA; TYPE BYTETABLE; };
RANGE { START $89DB; END $8F67; TYPE CODE; };
RANGE { START $8F68; END $8F6F; TYPE WORDTABLE; UNIT $2; };
RANGE { START $8F70; END $90B8; TYPE CODE; };

RANGE { START $90B9; END $90E4; TYPE ADDRTABLE; };
RANGE { START $90E5; END $90F8; TYPE BYTETABLE; };
RANGE { START $90F9; END $9206; TYPE CODE; };
RANGE { START $9207; END $92DC; TYPE BYTETABLE; };
RANGE { START $92DD; END $93DA; TYPE CODE; };
RANGE { START $93DB; END $940A; TYPE BYTETABLE; };
RANGE { START $940B; END $9426; TYPE CODE; };
RANGE { START $9427; END $942E; TYPE BYTETABLE; };
RANGE { START $942F; END $95D5; TYPE CODE; };
RANGE { START $95D6; END $95F3; TYPE BYTETABLE; };
RANGE { START $95F4; END $977A; TYPE CODE; };
RANGE { START $977B; END $997A; TYPE BYTETABLE; };
RANGE { START $997B; END $9A23; TYPE CODE; };
RANGE { START $9A24; END $9A2B; TYPE BYTETABLE; };
RANGE { START $9A2C; END $9A4B; TYPE CODE; };
RANGE { START $9A4C; END $9A5B; TYPE BYTETABLE; };
RANGE { START $9A5C; END $9A5F; TYPE ADDRTABLE; };
RANGE { START $9A60; END $9A63; TYPE BYTETABLE; };
RANGE { START $9A64; END $9B3C; TYPE CODE; };
RANGE { START $9B3D; END $9C21; TYPE BYTETABLE; };
RANGE { START $9C22; END $9C85; TYPE CODE; };
RANGE { START $9C86; END $9CD4; TYPE BYTETABLE; };
RANGE { START $9CD5; END $9CDC; TYPE ADDRTABLE; };
RANGE { START $9CDD; END $9D4F; TYPE CODE; };
RANGE { START $9D50; END $9D53; TYPE BYTETABLE; };
RANGE { START $9D54; END $9D62; TYPE CODE; };
RANGE { START $9D63; END $BC1E; TYPE BYTETABLE; };

RANGE { START $BC1F; END $BDFE; TYPE CODE; };
RANGE { START $BDFF; END $C005; TYPE BYTETABLE; };

RANGE { START $C006; END $C090; TYPE CODE; };
RANGE { START $C091; END $C0EF; TYPE BYTETABLE; };
RANGE { START $C0F0; END $C101; TYPE CODE; };
RANGE { START $C102; END $C113; TYPE ADDRTABLE; };

RANGE { START $C114; END $C1A6; TYPE CODE; };
RANGE { START $C1A7; END $C1C6; TYPE BYTETABLE; };
RANGE { START $C1C7; END $C216; TYPE CODE; };
RANGE { START $C217; END $C21C; TYPE BYTETABLE; };
RANGE { START $C21D; END $C2D4; TYPE CODE; };

RANGE { START $C2D5; END $C2EC; TYPE BYTETABLE; };
RANGE { START $C2ED; END $C361; TYPE CODE; };
RANGE { START $C362; END $C362; TYPE BYTETABLE; };
RANGE { START $C363; END $C39A; TYPE CODE; };
RANGE { START $C39B; END $C3CA; TYPE BYTETABLE; };
RANGE { START $C3CB; END $C3E0; TYPE CODE; };
RANGE { START $C3E1; END $DFFF; TYPE BYTETABLE; };

RANGE { START $E000; END $E002; TYPE CODE; };
RANGE { START $E003; END $E070; TYPE ADDRTABLE; };
RANGE { START $E071; END $E114; TYPE BYTETABLE; };
RANGE { START $E115; END $E11E; TYPE ADDRTABLE; };
RANGE { START $E11F; END $E2A9; TYPE BYTETABLE; };
RANGE { START $E2AA; END $E342; TYPE CODE; };
RANGE { START $E343; END $E38A; TYPE BYTETABLE; };
RANGE { START $E38B; END $E63F; TYPE CODE; };
RANGE { START $E640; END $E79D; TYPE BYTETABLE; };
RANGE { START $E79E; END $E9BE; TYPE CODE; };
RANGE { START $E9BF; END $EA65; TYPE BYTETABLE; };
RANGE { START $EA66; END $EAE4; TYPE CODE; };
RANGE { START $EAE5; END $EAF4; TYPE BYTETABLE; };
RANGE { START $EAF5; END $ED01; TYPE CODE; };
RANGE { START $ED02; END $F7FF; TYPE BYTETABLE; };

RANGE { START $F800; END $FD85; TYPE CODE; };
RANGE { START $FD86; END $FEFF; TYPE BYTETABLE; };
RANGE { START $FF00; END $FF32; TYPE CODE; };
RANGE { START $FF33; END $FFF9; TYPE BYTETABLE; };
RANGE { START $FFFA; END $FFFF; TYPE ADDRTABLE; };
