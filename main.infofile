GLOBAL { 
  INPUTNAME "clean.nes"; 
  OUTPUTNAME "main.asm"; 
  INPUTOFFS $0010; 
  INPUTSIZE $8000; 
  COMMENTS $4; 
  STARTADDR $8000; 
  LABELBREAK $1; 
};

SEGMENT { NAME "VECTORS"; START $FFFA; END $FFFF; };

LABEL { ADDR $0012; NAME "tmp12"; COMMENT "Appears to have multiple uses. One is for ram init along with $13"; };
LABEL { ADDR $0013; NAME "tmp13"; };
LABEL { ADDR $002B; NAME "aBackup"; };
LABEL { ADDR $002C; NAME "xBackup"; };
LABEL { ADDR $002D; NAME "yBackup"; };
LABEL { ADDR $0030; NAME "controllerInput"; COMMENT "todo: find out where this is read"; };
LABEL { ADDR $003C; NAME "nmiWaitVar"; COMMENT "appears to always be 0?  Maybe all logic starts with NMI and ends in loop"; };
LABEL { ADDR $0056; NAME "rngSeed"; SIZE $7; };

LABEL { ADDR $2000; NAME "PPUCTRL"; };
LABEL { ADDR $2001; NAME "PPUMASK"; };
LABEL { ADDR $2002; NAME "PPUSTATUS"; };
LABEL { ADDR $2003; NAME "OAMADDR"; };
LABEL { ADDR $2004; NAME "OAMDATA"; };
LABEL { ADDR $2005; NAME "PPUSCROLL"; };
LABEL { ADDR $2006; NAME "PPUADDR"; };
LABEL { ADDR $2007; NAME "PPUDATA"; };

LABEL { ADDR $4000; NAME "SQ1_VOL"; };
LABEL { ADDR $4001; NAME "SQ1_SWEEP"; };
LABEL { ADDR $4002; NAME "SQ1_LO"; };
LABEL { ADDR $4003; NAME "SQ1_HI"; };
LABEL { ADDR $4004; NAME "SQ2_VOL"; };
LABEL { ADDR $4005; NAME "SQ2_SWEEP"; };
LABEL { ADDR $4006; NAME "SQ2_LO"; };
LABEL { ADDR $4007; NAME "SQ2_HI"; };
LABEL { ADDR $4008; NAME "TRI_LINEAR"; };
LABEL { ADDR $400A; NAME "TRI_LO"; };
LABEL { ADDR $400B; NAME "TRI_HI"; };
LABEL { ADDR $400C; NAME "NOISE_VOL"; };
LABEL { ADDR $400E; NAME "NOISE_LO"; };
LABEL { ADDR $400F; NAME "NOISE_HI"; };
LABEL { ADDR $4010; NAME "DMC_FREQ"; };
LABEL { ADDR $4011; NAME "DMC_RAW"; };
LABEL { ADDR $4012; NAME "DMC_START"; COMMENT "start << 6 + $C000"; };
LABEL { ADDR $4013; NAME "DMC_LEN"; COMMENT "len << 4 + 1"; };
LABEL { ADDR $4014; NAME "OAMDMA"; };
LABEL { ADDR $4015; NAME "SND_CHN"; };
LABEL { ADDR $4016; NAME "JOY1"; };
LABEL { ADDR $4017; NAME "JOY2"; };

LABEL { ADDR $8000; SIZE $3; NAME "reset"; COMMENT "$8002 is incremented during bootup.  mmc1 remnant?"; };
LABEL { ADDR $8003; NAME "irq"; };
LABEL { ADDR $8004; NAME "nmi"; };

LABEL { ADDR $8105; NAME "resetContinued"; };
LABEL { ADDR $8117; NAME "@vblankWait1"; };
LABEL { ADDR $811C; NAME "@vblankWait2"; };
LABEL { ADDR $8150; NAME "initRoutine"; COMMENT "need a better name"; };
LABEL { ADDR $8154; NAME "@initZeroPage"; COMMENT "this doesn't touch the first 16 bytes of zp.  FDS remnant?"; };
LABEL { ADDR $815C; NAME "@initRngSeed"; };
LABEL { ADDR $819A; NAME "ntCreditScreenPatch"; COMMENT "address, length, data, null"; };
LABEL { ADDR $81AB; NAME "drawCreditScreenPatch"; COMMENT "this writes 'credit screen' to the nametable but is overwritten"; };
LABEL { ADDR $81AD; NAME "@checkForNextPatch"; COMMENT "this routine looks like it can write multiple patches, but is hardcoded to the above"; };
LABEL { ADDR $817F; NAME "@nextByte"; };
LABEL { ADDR $81C1; NAME "@nextByte"; };
LABEL { ADDR $81CF; NAME "@resetScroll"; };
LABEL { ADDR $8A8A; NAME "@waitForNmi"; };
LABEL { ADDR $8F70; NAME "setCNROMBank0"; };
LABEL { ADDR $8F7B; NAME "maybeUnusedCode"; COMMENT "the branch above reads $01 From rom and only branches here on $00"; };
LABEL { ADDR $8FF8; NAME "blankOutNametables"; };

LABEL { ADDR $9006; NAME "@blankLoop"; };
LABEL { ADDR $9016; NAME "initRam"; };
LABEL { ADDR $9018; NAME "@nextPage"; };
LABEL { ADDR $9021; NAME "@initPage"; };
LABEL { ADDR $9028; NAME "@nextByte"; };

LABEL { ADDR $AF88; NAME "unknownTable01"; SIZE $96; COMMENT "copied to $04D9 during init at $817D"; };

LABEL { ADDR $C001; SIZE $2; NAME "cnromBank"; COMMENT "need to confirm.  Most likely for bus conflict avoidance"; };

RANGE { START $8000; END $800B; TYPE CODE; };
RANGE { START $800C; END $800C; TYPE BYTETABLE; };
RANGE { START $800D; END $807C; TYPE CODE; };
RANGE { START $807D; END $807F; TYPE BYTETABLE; };
RANGE { START $8080; END $80F8; TYPE CODE; };
RANGE { START $80F9; END $80FA; TYPE BYTETABLE; };
RANGE { START $80FB; END $8199; TYPE CODE; };
RANGE { START $819A; END $81AA; TYPE BYTETABLE; };
RANGE { START $81AB; END $81DE; TYPE CODE; };
RANGE { START $81DF; END $830C; TYPE BYTETABLE; };
RANGE { START $830D; END $8358; TYPE CODE; };
RANGE { START $8359; END $835B; TYPE BYTETABLE; };
RANGE { START $835C; END $83DC; TYPE CODE; };
RANGE { START $83DD; END $8414; TYPE BYTETABLE; };
RANGE { START $8415; END $84F2; TYPE CODE; };
RANGE { START $84F3; END $850C; TYPE BYTETABLE; };
RANGE { START $850D; END $859C; TYPE CODE; };
RANGE { START $859D; END $85B2; TYPE BYTETABLE; };
RANGE { START $85B3; END $8642; TYPE CODE; };
RANGE { START $8643; END $8664; TYPE BYTETABLE; };
RANGE { START $8665; END $8677; TYPE CODE; };
RANGE { START $8678; END $8681; TYPE BYTETABLE; };
RANGE { START $8682; END $8723; TYPE CODE; };
RANGE { START $8724; END $877C; TYPE BYTETABLE; };
RANGE { START $877D; END $87B1; TYPE CODE; };
RANGE { START $87B2; END $87D7; TYPE BYTETABLE; };
RANGE { START $87D8; END $8801; TYPE CODE; };
RANGE { START $8802; END $8811; TYPE BYTETABLE; };
RANGE { START $8812; END $884D; TYPE CODE; };
RANGE { START $884E; END $885C; TYPE BYTETABLE; };
RANGE { START $885D; END $886D; TYPE CODE; };
RANGE { START $886E; END $8873; TYPE BYTETABLE; };
RANGE { START $8874; END $8878; TYPE CODE; };
RANGE { START $8879; END $8887; TYPE BYTETABLE; };
RANGE { START $8888; END $8891; TYPE CODE; };
RANGE { START $8892; END $8893; TYPE BYTETABLE; };
RANGE { START $8894; END $88CA; TYPE CODE; };
RANGE { START $88CB; END $88D8; TYPE BYTETABLE; };
RANGE { START $88D9; END $88E1; TYPE CODE; };
RANGE { START $88E2; END $88E5; TYPE BYTETABLE; };
RANGE { START $88E6; END $88FA; TYPE CODE; };
RANGE { START $88FB; END $8922; TYPE BYTETABLE; };
RANGE { START $8923; END $896A; TYPE CODE; };
RANGE { START $896B; END $897F; TYPE BYTETABLE; };
RANGE { START $8980; END $89B5; TYPE CODE; };
RANGE { START $89B6; END $89E3; TYPE BYTETABLE; };
RANGE { START $89E4; END $8BB1; TYPE CODE; };
RANGE { START $8BB2; END $8BB3; TYPE BYTETABLE; };
RANGE { START $8BB4; END $8C26; TYPE CODE; };
RANGE { START $8C27; END $8C27; TYPE BYTETABLE; };
RANGE { START $8C28; END $8F22; TYPE CODE; };
RANGE { START $8F23; END $8F2D; TYPE BYTETABLE; };
RANGE { START $8F2E; END $9071; TYPE CODE; };
RANGE { START $9072; END $9094; TYPE BYTETABLE; };
RANGE { START $9095; END $90C1; TYPE CODE; };
RANGE { START $90C2; END $9101; TYPE BYTETABLE; };
RANGE { START $9102; END $920F; TYPE CODE; };
RANGE { START $9210; END $92E5; TYPE BYTETABLE; };
RANGE { START $92E6; END $930B; TYPE CODE; };
RANGE { START $930C; END $9311; TYPE BYTETABLE; };
RANGE { START $9312; END $93E3; TYPE CODE; };
RANGE { START $93E4; END $9413; TYPE BYTETABLE; };
RANGE { START $9414; END $942F; TYPE CODE; };
RANGE { START $9430; END $9437; TYPE BYTETABLE; };
RANGE { START $9438; END $9456; TYPE CODE; };
RANGE { START $9457; END $945B; TYPE BYTETABLE; };
RANGE { START $945C; END $9482; TYPE CODE; };
RANGE { START $9483; END $9494; TYPE BYTETABLE; };
RANGE { START $9495; END $94C4; TYPE CODE; };
RANGE { START $94C5; END $94D7; TYPE BYTETABLE; };
RANGE { START $94D8; END $950A; TYPE CODE; };
RANGE { START $950B; END $9510; TYPE BYTETABLE; };
RANGE { START $9511; END $9551; TYPE CODE; };
RANGE { START $9552; END $9553; TYPE BYTETABLE; };
RANGE { START $9554; END $9567; TYPE CODE; };
RANGE { START $9568; END $9569; TYPE BYTETABLE; };
RANGE { START $956A; END $95DE; TYPE CODE; };
RANGE { START $95DF; END $95FC; TYPE BYTETABLE; };
RANGE { START $95FD; END $96C1; TYPE CODE; };
RANGE { START $96C2; END $96C3; TYPE BYTETABLE; };
RANGE { START $96C4; END $9783; TYPE CODE; };
RANGE { START $9784; END $997A; TYPE BYTETABLE; };
RANGE { START $997B; END $9A2C; TYPE CODE; };
RANGE { START $9A2D; END $9A34; TYPE BYTETABLE; };
RANGE { START $9A35; END $9A54; TYPE CODE; };
RANGE { START $9A55; END $9A6C; TYPE BYTETABLE; };
RANGE { START $9A6D; END $9B3C; TYPE CODE; };
RANGE { START $9B3D; END $9C21; TYPE BYTETABLE; };
RANGE { START $9C22; END $9C85; TYPE CODE; };
RANGE { START $9C86; END $9CDC; TYPE BYTETABLE; };
RANGE { START $9CDD; END $9D58; TYPE CODE; };
RANGE { START $9D59; END $9D5A; TYPE BYTETABLE; };
RANGE { START $9D5B; END $9D5C; TYPE BYTETABLE; };
RANGE { START $9D5D; END $9D6B; TYPE CODE; };
RANGE { START $9D6C; END $A16B; TYPE BYTETABLE; };
RANGE { START $A16C; END $BC27; TYPE BYTETABLE; };
RANGE { START $BC28; END $BD06; TYPE CODE; };
RANGE { START $BD07; END $BD1D; TYPE BYTETABLE; };
RANGE { START $BD1E; END $BD30; TYPE CODE; };
RANGE { START $BD31; END $BD33; TYPE BYTETABLE; };
RANGE { START $BD34; END $BD71; TYPE CODE; };
RANGE { START $BD72; END $BD73; TYPE BYTETABLE; };
RANGE { START $BD74; END $BE07; TYPE CODE; };
RANGE { START $BE08; END $C00E; TYPE BYTETABLE; };
RANGE { START $C00F; END $C079; TYPE CODE; };
RANGE { START $C07A; END $C07A; TYPE BYTETABLE; };
RANGE { START $C07B; END $C099; TYPE CODE; };
RANGE { START $C09A; END $C0F8; TYPE BYTETABLE; };
RANGE { START $C0F9; END $C10A; TYPE CODE; };
RANGE { START $C10B; END $C11C; TYPE BYTETABLE; };
RANGE { START $C11D; END $C12B; TYPE CODE; };
RANGE { START $C12C; END $C17D; TYPE BYTETABLE; };
RANGE { START $C17E; END $C1AF; TYPE CODE; };
RANGE { START $C1B0; END $C1DB; TYPE BYTETABLE; };
RANGE { START $C1DC; END $C21F; TYPE CODE; };
RANGE { START $C220; END $C225; TYPE BYTETABLE; };
RANGE { START $C226; END $C23D; TYPE CODE; };
RANGE { START $C23E; END $C280; TYPE BYTETABLE; };
RANGE { START $C281; END $C2DD; TYPE CODE; };
RANGE { START $C2DE; END $C2F5; TYPE BYTETABLE; };
RANGE { START $C2F6; END $C361; TYPE CODE; };
RANGE { START $C362; END $C362; TYPE BYTETABLE; };
RANGE { START $C363; END $C3A3; TYPE CODE; };
RANGE { START $C3A4; END $C3D3; TYPE BYTETABLE; };
RANGE { START $C3D4; END $C3DC; TYPE CODE; };
RANGE { START $C3DD; END $E008; TYPE BYTETABLE; };
RANGE { START $E009; END $E00B; TYPE CODE; };
RANGE { START $E00C; END $E2B2; TYPE BYTETABLE; };
RANGE { START $E2B3; END $E328; TYPE CODE; };
RANGE { START $E329; END $E32B; TYPE BYTETABLE; };
RANGE { START $E32C; END $E34B; TYPE CODE; };
RANGE { START $E34C; END $E393; TYPE BYTETABLE; };
RANGE { START $E394; END $E648; TYPE CODE; };
RANGE { START $E649; END $E7A6; TYPE BYTETABLE; };
RANGE { START $E7A7; END $E855; TYPE CODE; };
RANGE { START $E856; END $E858; TYPE BYTETABLE; };
RANGE { START $E859; END $E8B5; TYPE CODE; };
RANGE { START $E8B6; END $E8B7; TYPE BYTETABLE; };
RANGE { START $E8B8; END $E965; TYPE CODE; };
RANGE { START $E966; END $E967; TYPE BYTETABLE; };
RANGE { START $E968; END $E9C7; TYPE CODE; };
RANGE { START $E9C8; END $EA6E; TYPE BYTETABLE; };
RANGE { START $EA6F; END $EAED; TYPE CODE; };
RANGE { START $EAEE; END $EAFD; TYPE BYTETABLE; };
RANGE { START $EAFE; END $ECFD; TYPE CODE; };
RANGE { START $ECFE; END $ECFF; TYPE BYTETABLE; };
RANGE { START $ED00; END $ED0A; TYPE CODE; };
RANGE { START $ED0B; END $F808; TYPE BYTETABLE; };
RANGE { START $F809; END $FD8E; TYPE CODE; };
RANGE { START $FD8F; END $FF08; TYPE BYTETABLE; };
RANGE { START $FF09; END $FF0E; TYPE CODE; };
RANGE { START $FF0F; END $FF11; TYPE BYTETABLE; };
RANGE { START $FF12; END $FF17; TYPE CODE; };
RANGE { START $FF18; END $FF1A; TYPE BYTETABLE; };
RANGE { START $FF1B; END $FF1D; TYPE CODE; };
RANGE { START $FF1E; END $FF29; TYPE BYTETABLE; };
RANGE { START $FF2A; END $FF2C; TYPE CODE; };
RANGE { START $FF2D; END $FF2F; TYPE BYTETABLE; };
RANGE { START $FF30; END $FF3B; TYPE CODE; };
RANGE { START $FF3C; END $FFF9; TYPE BYTETABLE; };
RANGE { START $FFFA; END $FFFF; TYPE ADDRTABLE; };
